//
// Copyright 2022-2023 Picovoice Inc.
//
// You may not use this file except in compliance with the license. A copy of the license is located in the "LICENSE"
// file accompanying this source.
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.pvStatusToException = exports.LeopardActivationRefused = exports.LeopardActivationThrottled = exports.LeopardActivationLimitReached = exports.LeopardActivationError = exports.LeopardRuntimeError = exports.LeopardInvalidStateError = exports.LeopardKeyError = exports.LeopardStopIterationError = exports.LeopardInvalidArgumentError = exports.LeopardIoError = exports.LeopardOutOfMemoryError = exports.LeopardError = void 0;
const pv_status_t_1 = require("./pv_status_t");
class LeopardError extends Error {
}
exports.LeopardError = LeopardError;
class LeopardOutOfMemoryError extends LeopardError {
}
exports.LeopardOutOfMemoryError = LeopardOutOfMemoryError;
class LeopardIoError extends LeopardError {
}
exports.LeopardIoError = LeopardIoError;
class LeopardInvalidArgumentError extends LeopardError {
}
exports.LeopardInvalidArgumentError = LeopardInvalidArgumentError;
class LeopardStopIterationError extends LeopardError {
}
exports.LeopardStopIterationError = LeopardStopIterationError;
class LeopardKeyError extends LeopardError {
}
exports.LeopardKeyError = LeopardKeyError;
class LeopardInvalidStateError extends LeopardError {
}
exports.LeopardInvalidStateError = LeopardInvalidStateError;
class LeopardRuntimeError extends LeopardError {
}
exports.LeopardRuntimeError = LeopardRuntimeError;
class LeopardActivationError extends LeopardError {
}
exports.LeopardActivationError = LeopardActivationError;
class LeopardActivationLimitReached extends LeopardError {
}
exports.LeopardActivationLimitReached = LeopardActivationLimitReached;
class LeopardActivationThrottled extends LeopardError {
}
exports.LeopardActivationThrottled = LeopardActivationThrottled;
class LeopardActivationRefused extends LeopardError {
}
exports.LeopardActivationRefused = LeopardActivationRefused;
function pvStatusToException(pvStatus, errorMessage) {
    switch (pvStatus) {
        case pv_status_t_1.default.OUT_OF_MEMORY:
            throw new LeopardOutOfMemoryError(errorMessage);
        case pv_status_t_1.default.IO_ERROR:
            throw new LeopardIoError(errorMessage);
        case pv_status_t_1.default.INVALID_ARGUMENT:
            throw new LeopardInvalidArgumentError(errorMessage);
        case pv_status_t_1.default.STOP_ITERATION:
            throw new LeopardStopIterationError(errorMessage);
        case pv_status_t_1.default.KEY_ERROR:
            throw new LeopardKeyError(errorMessage);
        case pv_status_t_1.default.INVALID_STATE:
            throw new LeopardInvalidStateError(errorMessage);
        case pv_status_t_1.default.RUNTIME_ERROR:
            throw new LeopardRuntimeError(errorMessage);
        case pv_status_t_1.default.ACTIVATION_ERROR:
            throw new LeopardActivationError(errorMessage);
        case pv_status_t_1.default.ACTIVATION_LIMIT_REACHED:
            throw new LeopardActivationLimitReached(errorMessage);
        case pv_status_t_1.default.ACTIVATION_THROTTLED:
            throw new LeopardActivationThrottled(errorMessage);
        case pv_status_t_1.default.ACTIVATION_REFUSED:
            throw new LeopardActivationRefused(errorMessage);
        default:
            // eslint-disable-next-line no-console
            console.warn(`Unmapped error code: ${pvStatus}`);
            throw new LeopardError(errorMessage);
    }
}
exports.pvStatusToException = pvStatusToException;
//# sourceMappingURL=errors.js.map