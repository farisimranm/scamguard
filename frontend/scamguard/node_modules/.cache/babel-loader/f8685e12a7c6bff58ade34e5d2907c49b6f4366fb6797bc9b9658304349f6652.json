{"ast":null,"code":"/**\n * spawnWorker\n *\n * @name spawnWorker\n * @function create a new Worker in browser\n * @access public\n */\nmodule.exports = _ref => {\n  let {\n    workerPath,\n    workerBlobURL\n  } = _ref;\n  let worker;\n  if (Blob && URL && workerBlobURL) {\n    const blob = new Blob([`importScripts(\"${workerPath}\");`], {\n      type: 'application/javascript'\n    });\n    worker = new Worker(URL.createObjectURL(blob));\n  } else {\n    worker = new Worker(workerPath);\n  }\n  return worker;\n};","map":{"version":3,"names":["module","exports","_ref","workerPath","workerBlobURL","worker","Blob","URL","blob","type","Worker","createObjectURL"],"sources":["D:/Projects/AML-Hackathon/scamguard/frontend/scamguard/node_modules/tesseract.js/src/worker/browser/spawnWorker.js"],"sourcesContent":["/**\n * spawnWorker\n *\n * @name spawnWorker\n * @function create a new Worker in browser\n * @access public\n */\nmodule.exports = ({ workerPath, workerBlobURL }) => {\n  let worker;\n  if (Blob && URL && workerBlobURL) {\n    const blob = new Blob([`importScripts(\"${workerPath}\");`], {\n      type: 'application/javascript',\n    });\n    worker = new Worker(URL.createObjectURL(blob));\n  } else {\n    worker = new Worker(workerPath);\n  }\n\n  return worker;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAO,GAAGC,IAAA,IAAmC;EAAA,IAAlC;IAAEC,UAAU;IAAEC;EAAc,CAAC,GAAAF,IAAA;EAC7C,IAAIG,MAAM;EACV,IAAIC,IAAI,IAAIC,GAAG,IAAIH,aAAa,EAAE;IAChC,MAAMI,IAAI,GAAG,IAAIF,IAAI,CAAC,CAAE,kBAAiBH,UAAW,KAAI,CAAC,EAAE;MACzDM,IAAI,EAAE;IACR,CAAC,CAAC;IACFJ,MAAM,GAAG,IAAIK,MAAM,CAACH,GAAG,CAACI,eAAe,CAACH,IAAI,CAAC,CAAC;EAChD,CAAC,MAAM;IACLH,MAAM,GAAG,IAAIK,MAAM,CAACP,UAAU,CAAC;EACjC;EAEA,OAAOE,MAAM;AACf,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}